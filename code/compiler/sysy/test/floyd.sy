const int N = 1024;
int dist[N][N];

void floyd(int n, int dist[][N]) {
	int i, j, k;

	k = 0;
	while (k < n) {
		i = 0;
		while (i < n) {
			j = 0;
			while (j < n) {
				if (dist[i][k] + dist[k][j] < dist[i][j]) {
					dist[i][j] = dist[i][k] + dist[k][j];
				}
				j = j + 1;
			}
			i = i + 1;
		}
		k = k + 1;
	}
}

int main() {
	int n = getint();
	//int n = 5;
	//dist[5][5] = {{3,5,7,2,8}, {4,8,1,9,4}, {2,6,10,1,5},{5,7,1,5,6},{13,3,7,9,10}};
	int i, j;
	i = 0;
	j = 0;
	while (i < n) {
		j = 0;
		while (j < n) {
			dist[i][j] = getint();
			j = j + 1;
		}
		i = i + 1;
	}
	
	starttime();
	floyd(n, dist);
	stoptime();
	i = 0;
	while (i < n) {
		j = 0;
		while (j < n) {
			putint(dist[i][j]);
			putch(32);
			j = j + 1;
		}
		i = i + 1;
	}
	return 0;
}

